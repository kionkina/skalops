# Load LSTM network and generate text
import sys
import numpy
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import LSTM
from keras.callbacks import ModelCheckpoint
from keras.utils import np_utils

# load ascii text and covert to lowercase
filename = "wonderland.txt"
raw_text = open(filename).read()
raw_word_text = raw_text.lower().split(" ")
# create mapping of unique chars to integers, and a reverse mapping
words = sorted(list(set(raw_word_text)))
word_to_int = dict((c, i) for i, c in enumerate(words))
int_to_word = dict((i, c) for i, c in enumerate(words))
# summarize the loaded data
n_words = len(raw_word_text)
n_vocab = len(words)
# prepare the dataset of input to output pairs encoded as integers
seq_length = 10
dataX = []
dataY = []
for i in range(0, n_words - seq_length, 1):
	seq_in = raw_word_text[i:i + seq_length]
	seq_out = raw_word_text[i + seq_length]
	dataX.append([word_to_int[word] for word in seq_in])
	dataY.append(word_to_int[seq_out])
n_patterns = len(dataX)
# reshape X to be [samples, time steps, features]
X = numpy.reshape(dataX, (n_patterns, seq_length, 1))
# normalize
X = X / float(n_vocab)
# one hot encode the output variable
y = np_utils.to_categorical(dataY)
# define the LSTM model
model = Sequential()
model.add(LSTM(100, input_shape=(X.shape[1], X.shape[2])))
model.add(Dropout(0.2))
model.add(Dense(y.shape[1], activation='softmax'))
# load the network weights
# filename = "weights-improvement-19-1.9435.hdf5"
filename = "weights-improvement-95-2.3177.hdf5"
model.load_weights(filename)
model.compile(loss='categorical_crossentropy', optimizer='adam')
# pick a random seed

# print "Seed:"
# print "\"", ' '.join([int_to_word[value] for value in pattern]), "\""
# generate words
def makeTweets():
	start = numpy.random.randint(0, len(dataX)-1)
	pattern = dataX[start]
	seed = ' '.join([int_to_word[value] for value in pattern])
	stringout = ""
	for i in range(10):
		x = numpy.reshape(pattern, (1, len(pattern), 1))
		x = x / float(n_vocab)
		prediction = model.predict(x, verbose=0)
		index = numpy.argmax(prediction)
		result = int_to_word[index] + " "
		seq_in = [int_to_word[value] for value in pattern] ## 266
		stringout += result
		pattern.append(index)
		pattern = pattern[1:len(pattern)]
	return [seed, stringout.capitalize()]

